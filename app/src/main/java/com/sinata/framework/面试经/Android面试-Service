3.0 service 的生命周期，两种启动方式的区别
https://blog.csdn.net/weixin_43615488/article/details/104687977
onCreate, onStartCommand, onBind 和 onDestroy。这几个方法都是回调方法，都是由Android操作系统在合适的时机调用的，并且需要注意的是这几个回调方法都是在主线程中被调用的。
1、onCreate: 执行startService方法时，如果Service没有运行的时候会创建该Service并执行Service的onCreate回调方法；如果Service已经处于运行中，那么执行startService方法不会执行Service的onCreate方法。也就是说如果多次执行了Context的startService方法启动Service，Service方法的onCreate方法只会在第一次创建Service的时候调用一次，以后均不会再次调用！！！！我们可以在onCreate方法中完成一些Service初始化相关的操作。
2、onStartCommand: 在执行了startService方法之后，有可能会调用Service的onCreate方法，在这之后一定会执行Service的onStartCommand回调方法。也就是说，如果多次执行了Context的startService方法，那么Service的onStartCommand方法也会相应的多次调用！！！onStartCommand方法很重要，我们在该方法中根据传入的Intent参数进行实际的操作，比如会在此处创建一个线程用于下载数据或播放音乐等。
3、onBind: Service中的onBind方法是抽象方法，所以Service类本身就是抽象类，也就是onBind方法是必须重写的，即使我们用不到。在通过startService使用Service时，我们在重写onBind方法时，只需要将其返回null即可。onBind方法主要是用于给bindService方法调用Service时才会使用到。
4、onDestroy: 通过startService方法启动的Service会无限期运行，只有当调用了Context的stopService或在Service内部调用stopSelf方法时，Service才会停止运行并销毁，在销毁的时候会执行Service回调函数。
被绑定的service是当其他组件（一个客户）调用bindService()来创建的。客户可以通过一个IBinder接口和service进行通信。客户可以通过 unbindService()方法来关闭这种连接。一个service可以同时和多个客户绑定，当多个客户都解除绑定之后，系统会销毁service。context.bindService()->onCreate()->onBind()->Service running–>onUnbind() -> onDestroy() ->Service stop，onBind将返回给客户端一个IBind接口实例，IBind允许客户端回调服务的方法，比如得到Service运行的状态或其他操作。这个时候把调用者（Context，例如Activity）会和Service绑定在一起，当解除绑定时，只有完全没有Client与它绑定时才会调用onUnbind和onDestroy，否则都不会调用。
方法一：onStartCommand中返回START_STICKY，如果内存不足被杀死，那么等内存足够是系统会自动重启Service；
方法二：提升service优先级，只是降低了被杀死的概率，但如果被杀死不会重启；
方法三：Android中的进程是托管的，当系统进程空间紧张的时候，会依照优先级自动进行进程的回收。Android将进程分为6个等级,它们按优先级顺序由高到低依次是:
1.前台进程( FOREGROUND_APP)
2.可视进程(VISIBLE_APP )
3. 次要服务进程(SECONDARY_SERVER )
4.后台进程 (HIDDEN_APP)
5.内容供应节点(CONTENT_PROVIDER)
6.空进程(EMPTY_APP)
当service运行在低内存的环境时，将会kill掉一些存在的进程。因此进程的优先级将会很重要，可以使用startForeground将service放到前台状态。这样在低内存时被kill的几率会低一些。
白色方法：放一个可见的Notification，使用startForeground，如网易云音乐。
灰色方法：它是利用系统的漏洞来启动一个前台的Service进程，与普通的启动方式区别在于，它不会在系统通知栏处出现一个Notification，看起来就如同运行着一个后台Service进程一样。这样做带来的好处就是，用户无法察觉到你运行着一个前台进程（因为看不到Notification）,但你的进程优先级又是高于普通后台进程的。
方法四：监听锁屏事件或者主Activity被关闭时，显示一个1像素的透明Activity，让进程成为前台进程。
方法五：守护进程（Native层或者Java层），互相监听。

3.1 Service与Activity怎么实现通信
https://blog.csdn.net/xiaanming/article/details/9750689
在Android中，Activity主要负责前台页面的展示，Service主要负责需要长期运行的任务，所以在我们实际开发中，就会常常遇到Activity与Service之间的通信，我们一般在Activity中启动后台Service，通过Intent来启动，Intent中我们可以传递数据给Service，而当我们Service执行某些操作之后想要更新UI线程，我们应该怎么做呢？接下来我就介绍两种方式来实现Service与Activity之间的通信问题

通过Binder对象
当Activity通过调用bindService(Intent service, ServiceConnection conn,int flags),我们可以得到一个Service的一个对象实例，然后我们就可以访问Service中的方法，我们还是通过一个例子来理解一下吧，一个模拟下载的小例子，带大家理解一下通过Binder通信的方式

首先我们新建一个工程Communication，然后新建一个Service类

package com.example.communication;

import android.app.Service;
import android.content.Intent;
import android.os.Binder;
import android.os.IBinder;

public class MsgService extends Service {
	/**
	 * 进度条的最大值
	 */
	public static final int MAX_PROGRESS = 100;
	/**
	 * 进度条的进度值
	 */
	private int progress = 0;

	/**
	 * 增加get()方法，供Activity调用
	 * @return 下载进度
	 */
	public int getProgress() {
		return progress;
	}

	/**
	 * 模拟下载任务，每秒钟更新一次
	 */
	public void startDownLoad(){
		new Thread(new Runnable() {

			@Override
			public void run() {
				while(progress < MAX_PROGRESS){
					progress += 5;
					try {
						Thread.sleep(1000);
					} catch (InterruptedException e) {
						e.printStackTrace();
					}

				}
			}
		}).start();
	}


	/**
	 * 返回一个Binder对象
	 */
	@Override
	public IBinder onBind(Intent intent) {
		return new MsgBinder();
	}

	public class MsgBinder extends Binder{
		/**
		 * 获取当前Service的实例
		 * @return
		 */
		public MsgService getService(){
			return MsgService.this;
		}
	}

}
上面的代码比较简单，注释也比较详细，最基本的Service的应用了，相信你看得懂的，我们调用startDownLoad()方法来模拟下载任务，然后每秒更新一次进度，但这是在后台进行中，我们是看不到的，所以有时候我们需要他能在前台显示下载的进度问题，所以我们接下来就用到Activity了
Intent intent = new Intent("com.example.communication.MSG_ACTION");
bindService(intent, conn, Context.BIND_AUTO_CREATE);
通过上面的代码我们就在Activity绑定了一个Service,上面需要一个ServiceConnection对象，它是一个接口，我们这里使用了匿名内部类
	ServiceConnection conn = new ServiceConnection() {

		@Override
		public void onServiceDisconnected(ComponentName name) {

		}

		@Override
		public void onServiceConnected(ComponentName name, IBinder service) {
			//返回一个MsgService对象
			msgService = ((MsgService.MsgBinder)service).getService();

		}
	};
在onServiceConnected(ComponentName name, IBinder service) 回调方法中，返回了一个MsgService中的Binder对象，我们可以通过getService()方法来得到一个MsgService对象，然后可以调用MsgService中的一些方法,Activity的代码如下

package com.example.communication;

import android.app.Activity;
import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.content.ServiceConnection;
import android.os.Bundle;
import android.os.IBinder;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.ProgressBar;

public class MainActivity extends Activity {
	private MsgService msgService;
	private int progress = 0;
	private ProgressBar mProgressBar;


	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);


		//绑定Service
		Intent intent = new Intent("com.example.communication.MSG_ACTION");
		bindService(intent, conn, Context.BIND_AUTO_CREATE);


		mProgressBar = (ProgressBar) findViewById(R.id.progressBar1);
		Button mButton = (Button) findViewById(R.id.button1);
		mButton.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				//开始下载
				msgService.startDownLoad();
				//监听进度
				listenProgress();
			}
		});

	}


	/**
	 * 监听进度，每秒钟获取调用MsgService的getProgress()方法来获取进度，更新UI
	 */
	public void listenProgress(){
		new Thread(new Runnable() {

			@Override
			public void run() {
				while(progress < MsgService.MAX_PROGRESS){
					progress = msgService.getProgress();
					mProgressBar.setProgress(progress);
					try {
						Thread.sleep(1000);
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
				}

			}
		}).start();
	}

	ServiceConnection conn = new ServiceConnection() {
		@Override
		public void onServiceDisconnected(ComponentName name) {

		}

		@Override
		public void onServiceConnected(ComponentName name, IBinder service) {
			//返回一个MsgService对象
			msgService = ((MsgService.MsgBinder)service).getService();

		}
	};

	@Override
	protected void onDestroy() {
		unbindService(conn);
		super.onDestroy();
	}


}
其实上面的代码我还是有点疑问，就是监听进度变化的那个方法我是直接在线程中更新UI的，不是说不能在其他线程更新UI操作吗，可能是ProgressBar比较特殊吧，我也没去研究它的源码，知道的朋友可以告诉我一声，谢谢！
上面的代码就完成了在Service更新UI的操作，可是你发现了没有，我们每次都要主动调用getProgress()来获取进度值，然后隔一秒在调用一次getProgress()方法，你会不会觉得很被动呢？可不可以有一种方法当Service中进度发生变化主动通知Activity，答案是肯定的，我们可以利用回调接口实现Service的主动通知，不理解回调方法的可以看看http://blog.csdn.net/xiaanming/article/details/8703708

新建一个回调接口

public interface OnProgressListener {
	void onProgress(int progress);
}
MsgService的代码有一些小小的改变，为了方便大家看懂，我还是将所有代码贴出来
package com.example.communication;

import android.app.Service;
import android.content.Intent;
import android.os.Binder;
import android.os.IBinder;

public class MsgService extends Service {
	/**
	 * 进度条的最大值
	 */
	public static final int MAX_PROGRESS = 100;
	/**
	 * 进度条的进度值
	 */
	private int progress = 0;

	/**
	 * 更新进度的回调接口
	 */
	private OnProgressListener onProgressListener;


	/**
	 * 注册回调接口的方法，供外部调用
	 * @param onProgressListener
	 */
	public void setOnProgressListener(OnProgressListener onProgressListener) {
		this.onProgressListener = onProgressListener;
	}

	/**
	 * 增加get()方法，供Activity调用
	 * @return 下载进度
	 */
	public int getProgress() {
		return progress;
	}

	/**
	 * 模拟下载任务，每秒钟更新一次
	 */
	public void startDownLoad(){
		new Thread(new Runnable() {

			@Override
			public void run() {
				while(progress < MAX_PROGRESS){
					progress += 5;

					//进度发生变化通知调用方
					if(onProgressListener != null){
						onProgressListener.onProgress(progress);
					}

					try {
						Thread.sleep(1000);
					} catch (InterruptedException e) {
						e.printStackTrace();
					}

				}
			}
		}).start();
	}


	/**
	 * 返回一个Binder对象
	 */
	@Override
	public IBinder onBind(Intent intent) {
		return new MsgBinder();
	}

	public class MsgBinder extends Binder{
		/**
		 * 获取当前Service的实例
		 * @return
		 */
		public MsgService getService(){
			return MsgService.this;
		}
	}

}
Activity中的代码如下
package com.example.communication;

import android.app.Activity;
import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.content.ServiceConnection;
import android.os.Bundle;
import android.os.IBinder;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.ProgressBar;

public class MainActivity extends Activity {
	private MsgService msgService;
	private ProgressBar mProgressBar;


	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);


		//绑定Service
		Intent intent = new Intent("com.example.communication.MSG_ACTION");
		bindService(intent, conn, Context.BIND_AUTO_CREATE);


		mProgressBar = (ProgressBar) findViewById(R.id.progressBar1);
		Button mButton = (Button) findViewById(R.id.button1);
		mButton.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				//开始下载
				msgService.startDownLoad();
			}
		});

	}


	ServiceConnection conn = new ServiceConnection() {
		@Override
		public void onServiceDisconnected(ComponentName name) {

		}

		@Override
		public void onServiceConnected(ComponentName name, IBinder service) {
			//返回一个MsgService对象
			msgService = ((MsgService.MsgBinder)service).getService();

			//注册回调接口来接收下载进度的变化
			msgService.setOnProgressListener(new OnProgressListener() {

				@Override
				public void onProgress(int progress) {
					mProgressBar.setProgress(progress);

				}
			});

		}
	};

	@Override
	protected void onDestroy() {
		unbindService(conn);
		super.onDestroy();
	}


}
用回调接口是不是更加的方便呢，当进度发生变化的时候Service主动通知Activity，Activity就可以更新UI操作了

通过broadcast(广播)的形式
当我们的进度发生变化的时候我们发送一条广播，然后在Activity的注册广播接收器，接收到广播之后更新ProgressBar,代码如下

package com.example.communication;

import android.app.Activity;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.os.Bundle;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.ProgressBar;

public class MainActivity extends Activity {
	private ProgressBar mProgressBar;
	private Intent mIntent;
	private MsgReceiver msgReceiver;


	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);

		//动态注册广播接收器
		msgReceiver = new MsgReceiver();
		IntentFilter intentFilter = new IntentFilter();
		intentFilter.addAction("com.example.communication.RECEIVER");
		registerReceiver(msgReceiver, intentFilter);


		mProgressBar = (ProgressBar) findViewById(R.id.progressBar1);
		Button mButton = (Button) findViewById(R.id.button1);
		mButton.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				//启动服务
				mIntent = new Intent("com.example.communication.MSG_ACTION");
				startService(mIntent);
			}
		});

	}


	@Override
	protected void onDestroy() {
		//停止服务
		stopService(mIntent);
		//注销广播
		unregisterReceiver(msgReceiver);
		super.onDestroy();
	}


	/**
	 * 广播接收器
	 * @author len
	 *
	 */
	public class MsgReceiver extends BroadcastReceiver{

		@Override
		public void onReceive(Context context, Intent intent) {
			//拿到进度，更新UI
			int progress = intent.getIntExtra("progress", 0);
			mProgressBar.setProgress(progress);
		}

	}

}

 package com.example.communication;

import android.app.Service;
import android.content.Intent;
import android.os.IBinder;

public class MsgService extends Service {
	/**
	 * 进度条的最大值
	 */
	public static final int MAX_PROGRESS = 100;
	/**
	 * 进度条的进度值
	 */
	private int progress = 0;

	private Intent intent = new Intent("com.example.communication.RECEIVER");


	/**
	 * 模拟下载任务，每秒钟更新一次
	 */
	public void startDownLoad(){
		new Thread(new Runnable() {

			@Override
			public void run() {
				while(progress < MAX_PROGRESS){
					progress += 5;

					//发送Action为com.example.communication.RECEIVER的广播
					intent.putExtra("progress", progress);
					sendBroadcast(intent);

					try {
						Thread.sleep(1000);
					} catch (InterruptedException e) {
						e.printStackTrace();
					}

				}
			}
		}).start();
	}



	@Override
	public int onStartCommand(Intent intent, int flags, int startId) {
		startDownLoad();
		return super.onStartCommand(intent, flags, startId);
	}



	@Override
	public IBinder onBind(Intent intent) {
		return null;
	}


}
总结:
Activity调用bindService (Intent service, ServiceConnection conn, int flags)方法，得到Service对象的一个引用，这样Activity可以直接调用到Service中的方法，如果要主动通知Activity，我们可以利用回调方法
Service向Activity发送消息，可以使用广播，当然Activity要注册相应的接收器。比如Service要向多个Activity发送同样的消息的话，用这种方法就更好

IntentService是什么,IntentService原理，应用场景及其与Service的区别

Service中的onStartCommand()方法的三种返回值的含义以及理解
在service中，onStartCommand()方法有三种返回值：
START_STICKY（常量值：1）：sticky的意思是“粘性的”。使用这个返回值时，我们启动的服务跟应用程序"粘"在一起，如果在执行完onStartCommand后，服务被异常kill掉，系统会自动重启该服务。当再次启动服务时，传入的第一个参数将为null;
START_NOT_STICKY（常量值：2）：“非粘性的”。使用这个返回值时，如果在执行完onStartCommand后，服务被异常kill掉，系统不会自动重启该服务。
START_REDELIVER_INTENT（常量值：3）：重传Intent。使用这个返回值时，如果在执行完onStartCommand后，服务被异常kill掉，系统会自动重启该服务，并将Intent的值传入。

bindService和startService混合使用的生命周期以及怎么关闭
startService -> bindService->stopService -> unbindService
08-09 10:57:27.410 18963-18963/com.lb.secdemo I/secDemo: startService
08-09 10:57:27.435 18963-18963/com.lb.secdemo I/secDemo: serviceA onCreate
08-09 10:57:27.436 18963-18963/com.lb.secdemo I/secDemo: serviceA onStartCommand
08-09 10:57:31.304 18963-18963/com.lb.secdemo I/secDemo: bindService
08-09 10:57:31.319 18963-18963/com.lb.secdemo I/secDemo: serviceA onBind
08-09 10:57:44.391 18963-18963/com.lb.secdemo I/secDemo: stopService
08-09 10:57:50.749 18963-18963/com.lb.secdemo I/secDemo: unbindService
08-09 10:57:50.761 18963-18963/com.lb.secdemo I/secDemo: serviceA onUnbind
08-09 10:57:50.762 18963-18963/com.lb.secdemo I/secDemo: serviceA onDestroy

startService -> bindService->unbindService -> stopService
08-09 11:01:00.221 19420-19420/com.lb.secdemo I/secDemo: startService
08-09 11:01:00.240 19420-19420/com.lb.secdemo I/secDemo: serviceA onCreate
08-09 11:01:00.241 19420-19420/com.lb.secdemo I/secDemo: serviceA onStartCommand
08-09 11:01:03.146 19420-19420/com.lb.secdemo I/secDemo: bindService
08-09 11:01:03.168 19420-19420/com.lb.secdemo I/secDemo: serviceA onBind
08-09 11:01:07.139 19420-19420/com.lb.secdemo I/secDemo: unbindService
08-09 11:01:07.144 19420-19420/com.lb.secdemo I/secDemo: serviceA onUnbind
08-09 11:01:22.781 19420-19420/com.lb.secdemo I/secDemo: stopService
08-09 11:01:22.789 19420-19420/com.lb.secdemo I/secDemo: serviceA onDestroy

bindService -> startService->stopService -> unbindService
08-09 11:03:07.336 20032-20032/com.lb.secdemo I/secDemo: bindService
08-09 11:03:07.349 20032-20032/com.lb.secdemo I/secDemo: serviceA onCreate
08-09 11:03:07.353 20032-20032/com.lb.secdemo I/secDemo: serviceA onBind
08-09 11:03:13.074 20032-20032/com.lb.secdemo I/secDemo: startService
08-09 11:03:13.092 20032-20032/com.lb.secdemo I/secDemo: serviceA onStartCommand
08-09 11:03:19.254 20032-20032/com.lb.secdemo I/secDemo: stopService
08-09 11:03:21.529 20032-20032/com.lb.secdemo I/secDemo: serviceA unbindService
08-09 11:03:21.546 20032-20032/com.lb.secdemo I/secDemo: serviceA onUnbind
08-09 11:03:21.551 20032-20032/com.lb.secdemo I/secDemo: serviceA onDestroy

bindService -> startService->unbindService -> stopService
08-09 11:01:58.195 19758-19758/com.lb.secdemo I/secDemo: bindService
08-09 11:01:58.212 19758-19758/com.lb.secdemo I/secDemo: serviceA onCreate
08-09 11:01:58.213 19758-19758/com.lb.secdemo I/secDemo: serviceA onBind
08-09 11:02:01.414 19758-19758/com.lb.secdemo I/secDemo: startService
08-09 11:02:01.433 19758-19758/com.lb.secdemo I/secDemo: serviceA onStartCommand
08-09 11:02:15.702 19758-19758/com.lb.secdemo I/secDemo: unbindService
08-09 11:02:15.708 19758-19758/com.lb.secdemo I/secDemo: serviceA onUnbind
08-09 11:02:23.204 19758-19758/com.lb.secdemo I/secDemo: stopService
08-09 11:02:23.216 19758-19758/com.lb.secdemo I/secDemo: serviceA onDestroy

用过哪些系统Service ？
https://blog.csdn.net/geyunfei_/article/details/78851024





